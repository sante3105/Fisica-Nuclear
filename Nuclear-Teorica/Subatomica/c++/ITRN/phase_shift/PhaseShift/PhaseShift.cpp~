#include "PhaseShift.h"
#include <cmath>
#include <stdexcept>
#include <gsl/gsl_sf_coulomb.h>
#include <gsl/gsl_errno.h>

double computePhaseShift(const std::vector<double>& u, double E, double a, double rmin, double rmax, int N, double mu, double hbar) {
    // Paso 1: Constantes físicas
    const double Z1 = 1.0;
    const double Z2 = 6.0;
    const double e2 = 1.44; // MeV·fm

    double k = std::sqrt(2.0 * mu * E) / hbar;
    double eta = Z1 * Z2 * e2 * mu / (hbar * hbar * k);
    double ka = k * a;
    double h = (rmax - rmin) / (N - 1);

    // Paso 2: Encontrar índice más cercano a r = a
    int ia = static_cast<int>((a - rmin) / h);
    if (ia < 1 || ia > N - 2)
        throw std::runtime_error("Matching point a fuera del rango del vector u.");

    double ua = u[ia];
    double uprime = (u[ia + 1] - u[ia - 1]) / (2.0 * h);
    double LI = uprime / ua;

    // Paso 3: Calcular funciones de Coulomb y derivadas
    gsl_sf_result F, Fp, G, Gp, exp_F, exp_G;
    int status = gsl_sf_coulomb_wave_FG_e(
        eta, ka, 0.0, 0, 0,
        &F, &Fp, &G, &Gp, &exp_F, &exp_G
    );

    if (status != GSL_SUCCESS)
        throw std::runtime_error("Error al evaluar funciones de Coulomb.");

    // Paso 4: Aplicar fórmula del desfase
    double numerator = ka * Fp.val - F.val * LI;
    double denominator = ka * Gp.val - G.val * LI;

    double tan_delta = numerator / denominator;
    double delta_rad = std::atan(tan_delta);

    return delta_rad; // en radianes
}
